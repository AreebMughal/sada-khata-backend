[{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\auth.controller.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hre' is defined but never used.","line":14,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[468,471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[468,471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prevent-abbreviations","severity":2,"message":"The variable `var1` should be named `variable1`. A more descriptive name will do too.","line":16,"column":9,"nodeType":"Identifier","messageId":"replace","endLine":16,"endColumn":13,"fix":{"range":[490,630],"text":"variable1;\r\n    if (register.username === '') {\r\n      variable1 = 'Username is required';\r\n    } else {\r\n      variable1 = ''\r\n    }\r\n    console.log(variable1"}},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":17,"column":5,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":21,"endColumn":6,"fix":{"range":[501,608],"text":"var1 = register.username === '' ? 'Username is required' : '';"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Method name `LoginAPI` must match one of the following formats: camelCase","line":27,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":27,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Body, Controller, Post } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { CreateUserDto } from '../user/dto/create-user.dto';\r\nimport { AuthService } from './auth.service';\r\nimport { LoginDto } from './dto/login.dto';\r\n\r\n\r\n@ApiTags('Auth')\r\n@Controller('auth')\r\nexport class AuthController {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  @Post('sign-up')\r\n  async register(@Body() register: CreateUserDto, hre: any) {\r\n    \r\n    let var1;\r\n    if (register.username === '') {\r\n      var1 = 'Username is required';\r\n    } else {\r\n      var1 = ''\r\n    }\r\n    console.log(var1);\r\n    return this.authService.signUp(register);\r\n  }\r\n\r\n  @Post('login')\r\n  async LoginAPI(@Body() loginDto: LoginDto) {\r\n    return this.authService.login(loginDto);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\auth.service.ts","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":27,"column":14,"nodeType":"Literal","messageId":"error","endLine":27,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[1015,1019],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1015,1019],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":35,"column":14,"nodeType":"Literal","messageId":"error","endLine":35,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[1224,1228],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1224,1228],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":39,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":39,"endColumn":14},{"ruleId":"camelcase","severity":2,"message":"Identifier 'access_token' is not in camel case.","line":50,"column":7,"nodeType":"Identifier","messageId":"notCamelCase","endLine":50,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { User } from 'src/entities';\r\nimport { CreateUserDto } from '../user/dto/create-user.dto';\r\nimport { UserService } from '../user/user.service';\r\nimport { LoginDto } from './dto/login.dto';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private userService: UserService,\r\n    private jwtService: JwtService,\r\n  ) {}\r\n\r\n  async signUp(createUserDto: CreateUserDto): Promise<User> {\r\n    const { password } = createUserDto;\r\n    const salt: string = bcrypt.genSaltSync(10);\r\n    const hashedPassword = bcrypt.hashSync(password, salt);\r\n    return this.userService.createUser({ ...createUserDto, password: hashedPassword });\r\n  }\r\n\r\n  async validateUser(username: string, password: string): Promise<User> {\r\n    const user = await this.userService.findOneBy({ username });\r\n    if (!user) {\r\n      console.log('User not found');\r\n      return null;\r\n    }\r\n    \r\n    const isPasswordValid = bcrypt.compareSync(password, user.password);\r\n    if (isPasswordValid) {\r\n      return user;\r\n    } else {\r\n      console.log('Invalid password');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async login(loginDto: LoginDto) {\r\n    const { username, password } = loginDto;\r\n    const user = await this.validateUser(username, password);\r\n\r\n    if (!user) {\r\n      throw new UnauthorizedException('Invalid credentials');\r\n    }\r\n\r\n    const payload = { username: user.username, sub: user.id };\r\n    return {\r\n      user,\r\n      access_token: await this.jwtService.signAsync(payload, { secret: process.env.JWT_SECRET }),\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\dto\\login.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\dto\\register.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\jwt-strategy\\jwt.strategy.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { UserService } from 'src/api/user/user.service';\r\nimport { IJwtPayload } from 'src/interfaces/jwt.interface';\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy) {\r\n  constructor(\r\n    private configService: ConfigService,\r\n    private userService: UserService,\r\n  ) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      ignoreExpiration: false,\r\n      secretOrKey: configService.get<string>('JWT_SECRET'),\r\n      passReqToCallback: true\r\n    });\r\n  }\r\n\r\n  async validate(payload: IJwtPayload) {\r\n    const { username } = payload;\r\n    const user = await this.userService.findOneBy({username});\r\n\r\n    if (!user) {\r\n      throw new UnauthorizedException();\r\n    }\r\n\r\n    return user; // Attaches the user object to the request\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\dto\\change-password.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\dto\\create-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\dto\\update-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\user.controller.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":37,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Method name `CreateUser` must match one of the following formats: camelCase","line":37,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":37,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `HelloThere` must match one of the following formats: camelCase, UPPER_CASE","line":38,"column":11,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":38,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":63,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Controller,\r\n  Post,\r\n  Body,\r\n  Param,\r\n  Put,\r\n  Delete,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { UserService } from './user.service';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\n\r\nimport {\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiBearerAuth,\r\n} from '@nestjs/swagger';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport { ChangePasswordDto } from './dto/change-password.dto';\r\nimport { JwtAuthGuard } from 'src/guards/jwt-auth.guard';\r\nimport { RolesGuard } from 'src/guards/roles.guard';\r\nimport { Roles } from 'src/decorators/roles.decorator';\r\nimport { ROLE_TYPE } from 'src/constants/user.enum';\r\n\r\n@ApiTags('Users')\r\n@Controller('users')\r\n@ApiBearerAuth()\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Post()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(ROLE_TYPE.SUPER_ADMIN)\r\n  @ApiOperation({ summary: 'Create a new user' })\r\n  @ApiResponse({ status: 201, description: 'User created successfully.' })\r\n  async CreateUser(@Body() createUserDto: CreateUserDto) {\r\n    const HelloThere = {\r\n      username: 'HelloThere',\r\n      hii: 's',\r\n    };\r\n    console.log('HelloThere', HelloThere);\r\n    return this.userService.createUser(createUserDto);\r\n  }\r\n\r\n  @Put(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(ROLE_TYPE.SUPER_ADMIN, ROLE_TYPE.USER)\r\n  @ApiOperation({ summary: 'Update user details' })\r\n  @ApiResponse({ status: 200, description: 'User updated successfully.' })\r\n  async updateUser(\r\n    @Param('id') id: string,\r\n    @Body() updateUserDto: UpdateUserDto,\r\n  ) {\r\n    return this.userService.updateUser(id, updateUserDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(ROLE_TYPE.SUPER_ADMIN)\r\n  @ApiOperation({ summary: 'Delete a user' })\r\n  @ApiResponse({ status: 200, description: 'User deleted successfully.' })\r\n  async deleteUser(@Param('id') id: string) {\r\n    return this.userService.deleteUser(id);\r\n  }\r\n\r\n  @Put(':id/change-password')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(ROLE_TYPE.USER)\r\n  @ApiOperation({ summary: 'Change user password' })\r\n  @ApiResponse({ status: 200, description: 'Password changed successfully.' })\r\n  async changePassword(\r\n    @Param('id') id: string,\r\n    @Body() changePasswordDto: ChangePasswordDto,\r\n  ) {\r\n    return this.userService.changePassword(id, changePasswordDto);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\user.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\user.service.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":92,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  BadRequestException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { User } from 'src/entities';\r\nimport { ChangePasswordDto } from './dto/change-password.dto';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private userRepository: Repository<User>,\r\n  ) {}\r\n\r\n  // Create User\r\n  async createUser(createUserDto: CreateUserDto): Promise<User> {\r\n    const { username, password } = createUserDto;\r\n\r\n    // Check if email is already taken\r\n    // let existingUser = await this.userRepository.findOne({ where: { email } });\r\n    // if (existingUser) {\r\n    //   throw new BadRequestException('Email already in use');\r\n    // }\r\n\r\n    const existingUser = await this.userRepository.findOne({\r\n      where: { username },\r\n    });\r\n    if (existingUser) {\r\n      throw new BadRequestException('Username already in use');\r\n    }\r\n\r\n    // Create and save user\r\n    const user = this.userRepository.create({\r\n      ...createUserDto,\r\n      password,\r\n    });\r\n    return this.userRepository.save(user);\r\n  }\r\n\r\n  // Update User\r\n  async updateUser(id: string, updateUserDto: UpdateUserDto): Promise<User> {\r\n    const user = await this.userRepository.findOneBy({ id });\r\n    if (!user) {\r\n      throw new NotFoundException('User not found');\r\n    }\r\n\r\n    // Update user details\r\n    Object.assign(user, updateUserDto);\r\n\r\n    return this.userRepository.save(user);\r\n  }\r\n\r\n  // Delete User\r\n  async deleteUser(id: string): Promise<void> {\r\n    const result = await this.userRepository.delete(id);\r\n    if (result.affected === 0) {\r\n      throw new NotFoundException('User not found');\r\n    }\r\n  }\r\n\r\n  // Change Password\r\n  async changePassword(\r\n    id: string,\r\n    changePasswordDto: ChangePasswordDto,\r\n  ): Promise<void> {\r\n    const { oldPassword, newPassword } = changePasswordDto;\r\n\r\n    const user = await this.userRepository.findOneBy({ id });\r\n    if (!user) {\r\n      throw new NotFoundException('User not found');\r\n    }\r\n\r\n    // Compare old password\r\n    const passwordMatches = await bcrypt.compare(oldPassword, user.password);\r\n    if (!passwordMatches) {\r\n      throw new BadRequestException('Old password is incorrect');\r\n    }\r\n\r\n    // Hash the new password and save\r\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n    user.password = hashedNewPassword;\r\n\r\n    await this.userRepository.save(user);\r\n  }\r\n\r\n  async findOneBy(where: object) {\r\n    return await this.userRepository.findOne({ where });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\config\\typeorm.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\constants\\user.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\decorators\\roles.decorator.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `Roles` must match one of the following formats: camelCase, UPPER_CASE","line":5,"column":14,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SetMetadata } from '@nestjs/common';\r\nimport { ROLE_TYPE } from 'src/constants/user.enum';\r\n\r\nexport const ROLES_KEY = 'roles';\r\nexport const Roles = (...roles: ROLE_TYPE[]) => SetMetadata(ROLES_KEY, roles);\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\entities\\index.ts","messages":[{"ruleId":"unicorn/prefer-export-from","severity":2,"message":"Use `export…from` to re-export `User`.","line":4,"column":5,"nodeType":"ExportSpecifier","messageId":"error","endLine":4,"endColumn":9,"fix":{"range":[41,100],"text":"\r\n\r\nexport const entities = [User];\r\n\nexport {User} from './user.entity';"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { User } from './user.entity';\r\n\r\nexport {\r\n    User,\r\n}\r\n\r\nexport const entities = [User];\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\entities\\user.entity.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Property name `_id` must match one of the following formats: camelCase, UPPER_CASE","line":8,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":8,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ObjectId } from 'mongodb';\r\nimport { ROLE_TYPE } from 'src/constants/user.enum';\r\nimport { Column, Entity, ObjectIdColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class User {\r\n  @ObjectIdColumn()\r\n  _id: ObjectId;\r\n\r\n  @Column({ type: 'varchar', length: 255 })\r\n  firstname: string;\r\n\r\n  @Column({ type: 'varchar', length: 255, nullable: true })\r\n  lastname?: string;\r\n\r\n  @Column({ type: 'varchar', length: 255, unique: true })\r\n  username: string;\r\n\r\n  @Column({ type: 'varchar', length: 255 })\r\n  password: string;\r\n\r\n  @Column({ type: 'enum', enum: ROLE_TYPE, default: ROLE_TYPE.USER })\r\n  type: ROLE_TYPE;\r\n\r\n  // Virtual field to map `_id` to `id`\r\n  get id(): string {\r\n    return this._id.toHexString();  // Converts ObjectID to string\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\guards\\jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\guards\\roles.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\interfaces\\jwt.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\interfaces\\response.interface.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31,34],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31,34],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IResponse<T = any> {\r\n    data: T | T[];\r\n    message: string;\r\n    totalRecords?: number;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\main.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":25},{"ruleId":"unicorn/prefer-top-level-await","severity":2,"message":"Prefer top-level await over an async function `bootstrap` call.","line":32,"column":1,"nodeType":"CallExpression","messageId":"identifier","endLine":32,"endColumn":12,"suggestions":[{"messageId":"add-await","fix":{"range":[1015,1015],"text":"await "},"data":{"name":"bootstrap"},"desc":"Insert `await`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport { ResponseInterceptor } from './utils/interceptors/response.interceptor';\r\nimport { HttpExceptionFilter } from './utils/interceptors/exception.interceptor';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n\r\n  // Swagger configuration\r\n  const config = new DocumentBuilder()\r\n    .setTitle('Sada khata - API Documentation')\r\n    .setDescription('API description')\r\n    .setVersion('1.0')\r\n    .addBearerAuth()\r\n    .build();\r\n\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('api', app, document);\r\n\r\n  app.useGlobalInterceptors(new ResponseInterceptor());\r\n  app.useGlobalFilters(new HttpExceptionFilter());\r\n\r\n  app.enableCors();\r\n  \r\n  const port = process.env.PORT || 5000;\r\n  await app.listen(port);\r\n\r\n  console.info(`Server is running on http://localhost:${port}`);\r\n}\r\n\r\nbootstrap();\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\utils\\interceptors\\exception.interceptor.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":8},{"ruleId":"unicorn/prevent-abbreviations","severity":2,"message":"The variable `ctx` should be named `context`. A more descriptive name will do too.","line":12,"column":11,"nodeType":"Identifier","messageId":"replace","endLine":12,"endColumn":14,"fix":{"range":[304,406],"text":"context = host.switchToHttp();\r\n    const response = context.getResponse<Response>();\r\n    const request = context"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\r\n  ExceptionFilter,\r\n  Catch,\r\n  ArgumentsHost,\r\n  HttpException,\r\n} from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\n\r\n@Catch(HttpException)\r\nexport class HttpExceptionFilter implements ExceptionFilter {\r\n  catch(exception: HttpException, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse<Response>();\r\n    const request = ctx.getRequest<Request>();\r\n    const status = exception.getStatus();\r\n\r\n    response.status(status).json({\r\n      succeeded: false,\r\n      message: exception.message || 'An error occurred',\r\n      statusCode: status,\r\n      timestamp: new Date().toISOString(),\r\n      path: request.url,\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\utils\\interceptors\\response.interceptor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[482,485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[482,485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-useless-undefined","severity":2,"message":"Do not use useless `undefined`.","line":23,"column":28,"nodeType":"Identifier","messageId":"no-useless-undefined","endLine":23,"endColumn":37,"fix":{"range":[527,539],"text":""}},{"ruleId":"unicorn/prefer-logical-operator-over-ternary","severity":2,"message":"Prefer using a logical operator over a ternary.","line":25,"column":26,"nodeType":"ConditionalExpression","messageId":"prefer-logical-operator-over-ternary/error","endLine":25,"endColumn":70,"suggestions":[{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"??"},"fix":{"range":[631,675],"text":"value?.totalRecords ?? 0"},"desc":"Switch to `??` operator."},{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"||"},"fix":{"range":[631,675],"text":"value?.totalRecords || 0"},"desc":"Switch to `||` operator."}]},{"ruleId":"unicorn/prefer-logical-operator-over-ternary","severity":2,"message":"Prefer using a logical operator over a ternary.","line":35,"column":20,"nodeType":"ConditionalExpression","messageId":"prefer-logical-operator-over-ternary/error","endLine":35,"endColumn":65,"suggestions":[{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"??"},"fix":{"range":[919,964],"text":"value?.message ?? 'Successful'"},"desc":"Switch to `??` operator."},{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"||"},"fix":{"range":[919,964],"text":"value?.message || 'Successful'"},"desc":"Switch to `||` operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\r\n  CallHandler,\r\n  ExecutionContext,\r\n  Injectable,\r\n  NestInterceptor\r\n} from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface Response<T> {\r\n  data: T;\r\n}\r\n\r\n@Injectable()\r\nexport class ResponseInterceptor<T> implements NestInterceptor<T, Response<T>> {\r\n  intercept(\r\n    context: ExecutionContext,\r\n    next: CallHandler,\r\n  ): Observable<Response<T>> {\r\n    return next.handle().pipe(\r\n      map((value: any) => {\r\n        \r\n        let totalRecords = undefined;\r\n        if (Array.isArray(value.data) && value.totalRecords) {\r\n          totalRecords = value?.totalRecords ? value.totalRecords : 0;\r\n        }\r\n\r\n        return {\r\n          succeeded: true,\r\n          totalRecords,\r\n          statusCode:\r\n            value?.status && typeof value.status === 'number'\r\n              ? value.status\r\n              : 201,\r\n          message: value?.message ? value.message : 'Successful',\r\n          data:\r\n            (value?.totalRecords !== null &&\r\n              value?.totalRecords !== undefined &&\r\n              typeof value?.totalRecords === 'number') ||\r\n            value?.data\r\n              ? value.data\r\n              : value?.message\r\n                ? []\r\n                : value,\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]}]