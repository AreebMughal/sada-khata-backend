[{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\auth.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[458,461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[458,461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[587,590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[587,590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { CreateUserDto } from '../user/dto/create-user.dto';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('sign-up')\n  async register(@Body() register: CreateUserDto): Promise<any> {\n    return this.authService.signUp(register);\n  }\n\n  @Post('login')\n  async loginAPI(@Body() loginDto: LoginDto): Promise<any> {\n    return this.authService.login(loginDto);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\auth.service.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":42,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcryptjs';\nimport { User } from 'src/entities';\nimport { CreateUserDto } from '../user/dto/create-user.dto';\nimport { UserService } from '../user/user.service';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService\n  ) {}\n\n  async signUp(createUserDto: CreateUserDto): Promise<User> {\n    const { password } = createUserDto;\n    const salt: string = bcrypt.genSaltSync(10);\n    const hashedPassword = bcrypt.hashSync(password, salt);\n    return this.userService.createUser({\n      ...createUserDto,\n      password: hashedPassword\n    });\n  }\n\n  async validateUser(username: string, password: string): Promise<User> {\n    const user = await this.userService.findOneBy({ username });\n    if (!user) {\n      console.log('User not found');\n      return null;\n    }\n\n    const isPasswordValid = bcrypt.compareSync(password, user.password);\n    if (isPasswordValid) {\n      return user;\n    } else {\n      console.log('Invalid password');\n      return null;\n    }\n  }\n\n  async login(loginDto: LoginDto) {\n    const { username, password } = loginDto;\n    const user = await this.validateUser(username, password);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const payload = { username: user.username, sub: user.id };\n    return {\n      user,\n      accessToken: await this.jwtService.signAsync(payload, {\n        secret: process.env.JWT_SECRET\n      })\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\dto\\login.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\dto\\register.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\auth\\jwt-strategy\\jwt.strategy.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserService } from 'src/api/user/user.service';\nimport { IJwtPayload } from 'src/interfaces/jwt.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private userService: UserService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get<string>('JWT_SECRET'),\n      passReqToCallback: true\n    });\n  }\n\n  async validate(payload: IJwtPayload) {\n    const { username } = payload;\n    const user = await this.userService.findOneBy({ username });\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user; // Attaches the user object to the request\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\dto\\change-password.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\dto\\create-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\dto\\update-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\user.controller.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":37,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":46,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":58,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Put,\n  Delete,\n  UseGuards\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\n\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth\n} from '@nestjs/swagger';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { JwtAuthGuard } from 'src/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/guards/roles.guard';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { ROLE_TYPE } from 'src/constants/user.enum';\n\n@ApiTags('Users')\n@Controller('users')\n@ApiBearerAuth()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLE_TYPE.SUPER_ADMIN)\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully.' })\n  async createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Put(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLE_TYPE.SUPER_ADMIN, ROLE_TYPE.USER)\n  @ApiOperation({ summary: 'Update user details' })\n  @ApiResponse({ status: 200, description: 'User updated successfully.' })\n  async updateUser(\n    @Param('id') id: string,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.userService.updateUser(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLE_TYPE.SUPER_ADMIN)\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully.' })\n  async deleteUser(@Param('id') id: string) {\n    return this.userService.deleteUser(id);\n  }\n\n  @Put(':id/change-password')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLE_TYPE.USER)\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiResponse({ status: 200, description: 'Password changed successfully.' })\n  async changePassword(\n    @Param('id') id: string,\n    @Body() changePasswordDto: ChangePasswordDto\n  ) {\n    return this.userService.changePassword(id, changePasswordDto);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\user.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\api\\user\\user.service.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":92,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  BadRequestException,\n  Injectable,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { User } from 'src/entities';\nimport { ChangePasswordDto } from './dto/change-password.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository<User>\n  ) {}\n\n  // Create User\n  async createUser(createUserDto: CreateUserDto): Promise<User> {\n    const { username, password } = createUserDto;\n\n    // Check if email is already taken\n    // let existingUser = await this.userRepository.findOne({ where: { email } });\n    // if (existingUser) {\n    //   throw new BadRequestException('Email already in use');\n    // }\n\n    const existingUser = await this.userRepository.findOne({\n      where: { username }\n    });\n    if (existingUser) {\n      throw new BadRequestException('Username already in use');\n    }\n\n    // Create and save user\n    const user = this.userRepository.create({\n      ...createUserDto,\n      password\n    });\n    return this.userRepository.save(user);\n  }\n\n  // Update User\n  async updateUser(id: string, updateUserDto: UpdateUserDto): Promise<User> {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Update user details\n    Object.assign(user, updateUserDto);\n\n    return this.userRepository.save(user);\n  }\n\n  // Delete User\n  async deleteUser(id: string): Promise<void> {\n    const result = await this.userRepository.delete(id);\n    if (result.affected === 0) {\n      throw new NotFoundException('User not found');\n    }\n  }\n\n  // Change Password\n  async changePassword(\n    id: string,\n    changePasswordDto: ChangePasswordDto\n  ): Promise<void> {\n    const { oldPassword, newPassword } = changePasswordDto;\n\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Compare old password\n    const passwordMatches = await bcrypt.compare(oldPassword, user.password);\n    if (!passwordMatches) {\n      throw new BadRequestException('Old password is incorrect');\n    }\n\n    // Hash the new password and save\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedNewPassword;\n\n    await this.userRepository.save(user);\n  }\n\n  async findOneBy(where: object) {\n    return await this.userRepository.findOne({ where });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\config\\typeorm.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\constants\\user.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\decorators\\roles.decorator.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `Roles` must match one of the following formats: camelCase, UPPER_CASE","line":5,"column":14,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SetMetadata } from '@nestjs/common';\nimport { ROLE_TYPE } from 'src/constants/user.enum';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles: ROLE_TYPE[]) => SetMetadata(ROLES_KEY, roles);\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\entities\\index.ts","messages":[{"ruleId":"unicorn/prefer-export-from","severity":2,"message":"Use `export…from` to re-export `User`.","line":3,"column":10,"nodeType":"ExportSpecifier","messageId":"error","endLine":3,"endColumn":14,"fix":{"range":[39,89],"text":"\n\nexport const entities = [User];\n\nexport {User} from './user.entity';"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { User } from './user.entity';\n\nexport { User };\n\nexport const entities = [User];\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\entities\\user.entity.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Property name `_id` must match one of the following formats: camelCase, UPPER_CASE","line":8,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":8,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ObjectId } from 'mongodb';\nimport { ROLE_TYPE } from 'src/constants/user.enum';\nimport { Column, Entity, ObjectIdColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @ObjectIdColumn()\n  _id: ObjectId;\n\n  @Column({ type: 'varchar', length: 255 })\n  firstname: string;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  lastname?: string;\n\n  @Column({ type: 'varchar', length: 255, unique: true })\n  username: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  password: string;\n\n  @Column({ type: 'enum', enum: ROLE_TYPE, default: ROLE_TYPE.USER })\n  type: ROLE_TYPE;\n\n  // Virtual field to map `_id` to `id`\n  get id(): string {\n    return this._id.toHexString(); // Converts ObjectID to string\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\guards\\jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\guards\\roles.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\interfaces\\jwt.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\interfaces\\response.interface.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31,34],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31,34],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IResponse<T = any> {\n  data: T | T[];\n  message: string;\n  totalRecords?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\main.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":25},{"ruleId":"unicorn/prefer-top-level-await","severity":2,"message":"Prefer top-level await over an async function `bootstrap` call.","line":32,"column":1,"nodeType":"CallExpression","messageId":"identifier","endLine":32,"endColumn":12,"suggestions":[{"messageId":"add-await","fix":{"range":[982,982],"text":"await "},"data":{"name":"bootstrap"},"desc":"Insert `await`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { ResponseInterceptor } from './utils/interceptors/response.interceptor';\nimport { HttpExceptionFilter } from './utils/interceptors/exception.interceptor';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Swagger configuration\n  const config = new DocumentBuilder()\n    .setTitle('Sada khata - API Documentation')\n    .setDescription('API description')\n    .setVersion('1.0')\n    .addBearerAuth()\n    .build();\n\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n\n  app.useGlobalInterceptors(new ResponseInterceptor());\n  app.useGlobalFilters(new HttpExceptionFilter());\n\n  app.enableCors();\n\n  const port = process.env.PORT || 5000;\n  await app.listen(port);\n\n  console.info(`Server is running on http://localhost:${port}`);\n}\n\nbootstrap();\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\utils\\interceptors\\exception.interceptor.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":8},{"ruleId":"unicorn/prevent-abbreviations","severity":2,"message":"The variable `ctx` should be named `context`. A more descriptive name will do too.","line":12,"column":11,"nodeType":"Identifier","messageId":"replace","endLine":12,"endColumn":14,"fix":{"range":[292,392],"text":"context = host.switchToHttp();\n    const response = context.getResponse<Response>();\n    const request = context"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const request = ctx.getRequest<Request>();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      succeeded: false,\n      message: exception.message || 'An error occurred',\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\My Projects\\sada-khata-backend\\src\\utils\\interceptors\\response.interceptor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[461,464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[461,464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-useless-undefined","severity":2,"message":"Do not use useless `undefined`.","line":22,"column":28,"nodeType":"Identifier","messageId":"no-useless-undefined","endLine":22,"endColumn":37,"fix":{"range":[495,507],"text":""}},{"ruleId":"unicorn/prefer-logical-operator-over-ternary","severity":2,"message":"Prefer using a logical operator over a ternary.","line":24,"column":26,"nodeType":"ConditionalExpression","messageId":"prefer-logical-operator-over-ternary/error","endLine":24,"endColumn":70,"suggestions":[{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"??"},"fix":{"range":[597,641],"text":"value?.totalRecords ?? 0"},"desc":"Switch to `??` operator."},{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"||"},"fix":{"range":[597,641],"text":"value?.totalRecords || 0"},"desc":"Switch to `||` operator."}]},{"ruleId":"unicorn/prefer-logical-operator-over-ternary","severity":2,"message":"Prefer using a logical operator over a ternary.","line":34,"column":20,"nodeType":"ConditionalExpression","messageId":"prefer-logical-operator-over-ternary/error","endLine":34,"endColumn":65,"suggestions":[{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"??"},"fix":{"range":[875,920],"text":"value?.message ?? 'Successful'"},"desc":"Switch to `??` operator."},{"messageId":"prefer-logical-operator-over-ternary/suggestion","data":{"operator":"||"},"fix":{"range":[875,920],"text":"value?.message || 'Successful'"},"desc":"Switch to `||` operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response<T> {\n  data: T;\n}\n\n@Injectable()\nexport class ResponseInterceptor<T> implements NestInterceptor<T, Response<T>> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler\n  ): Observable<Response<T>> {\n    return next.handle().pipe(\n      map((value: any) => {\n        let totalRecords = undefined;\n        if (Array.isArray(value.data) && value.totalRecords) {\n          totalRecords = value?.totalRecords ? value.totalRecords : 0;\n        }\n\n        return {\n          succeeded: true,\n          totalRecords,\n          statusCode:\n            value?.status && typeof value.status === 'number'\n              ? value.status\n              : 201,\n          message: value?.message ? value.message : 'Successful',\n          data:\n            (value?.totalRecords !== null &&\n              value?.totalRecords !== undefined &&\n              typeof value?.totalRecords === 'number') ||\n            value?.data\n              ? value.data\n              : value?.message\n                ? []\n                : value\n        };\n      })\n    );\n  }\n}\n","usedDeprecatedRules":[]}]